package aoc2017.day15;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.LongStream;

/**
 * Class that compares samples of number generators
 * 
 * @author Joris
 */
public class Judge {
	/** The generators it is judging */
	private final List<Generator> generators;
	
	/**
	 * Creates a new Judge with the given number generators
	 * 
	 * @param generators The number generators to use
	 */
	private Judge( final Collection<Generator> generators ) {
		this.generators = new ArrayList<>( generators );
	}
	
	/**
	 * Compares the specified number of outputs of all the generators and counts
	 * the number of times the lower 16 bits agree of the outputs
	 * 
	 * @param N The number of samples to compare
	 * @return The count of samples that agree
	 */
	public long compare( final long N ) {
		long count = 0;
		final long B = (long) Math.pow( 2, 16 ) - 1;
		
		for( long i = 0; i < N; i++ ) {
			if( generators.stream( ).mapToLong( x -> x.next( ) & B ).distinct( ).count( ) == 1 )
				count++;
		}
		
		return count;
	}
	
	/**
	 * Compares numbers generated by the generators, but only when these numbers
	 * are multitudes of the specified numbers
	 * 
	 * @param N The number of samples to compare
	 * @param multiples An array of multitudes such that for every generator it
	 *   contains a single number of which a sample must be a multitude before it
	 *   is sampled by the judge
	 * @return The number of samples that agree
	 */
	public long compareAsync( final long N, final long... multiples ) {
		long count = 0;
		final long B = (long) Math.pow( 2, 16 ) - 1;

		for( long i = 0; i < N; i++ ) {
			// get a valid sample from each generator
			long[] s = new long[ generators.size( ) ];
			for( int j = 0; j < s.length; j++ ) {
				while( generators.get( j ).next() % multiples[j] != 0 );
				s[j] = generators.get( j ).getLast( ) & B;
			}
			
			// compare lowest 16 bits
			if( LongStream.of( s ).distinct( ).count( ) == 1 ) count++;			
		}
		
		return count;
	}
	
	/**
	 * Creates a new Judge from the given generator descriptions
	 * 
	 * @param input The generators
	 * @return The generators   
	 */
	public static Judge fromStringList( final List<String> input ) {
		return new Judge( input.stream( ).map( Generator::fromString ).toList( ) );
	}

	/** @return The generators */
	@Override
	public String toString( ) {
		return generators.toString( );
	}
}
